#include<iostream>
#include<algorithm>
#include<vector>
#include<string>

using namespace std;
typedef long long ll;

/*
[문제 설명]
- 치킨집 맛의 수치로 내림차순 정렬.
- 16개의 치킨. 8명의 회원이 2개 치킨씩 선택해 정렬.  -> n/k=2 -> 정렬한 배열의 크기 -> 8*2
- 4명의 사람이 치킨 2개씩이 있는 그룹을 2개씩 선택해 정렬. -> n/k=4 -> 정렬한 배열의 크기 -> 4*4
- 2명의 사람이 치킨 4개씩 있는 그룹을 2개씩 선택해 정렬. -> n/k=8 -> 정렬한 배열의 크기 -> 2*8
- 마지막 한 명이 8개씩 있는 그룹 2개를 합병해 작업 완료.
- 현재 단계에서 k(1<=k<=N)명이 정렬 진행한다 할 때, 현재 단계 완료한 상태 출력하기.
[문제 접근]
- 합병 정렬, 분할 정복
1. 정렬되지 않은 배열의 크기가 1이 될 때까지 절반으로 자른다.
2. 인접한 두 개의 배열을 정렬하면서 합친다.
3. 위 과정을 배열이 모두 합쳐질 때까지 반복한다.
[버전] 
- https://cocosy.tistory.com/14 참고
- if문 위치와 r-l+1을 r-l로 바꾸는데 참고함
*/

int n;
int k;
int tmp[1048576]; // 임시 배열

// 두 배열을 정렬해서 합쳐줌
void merge(int v[], int l, int m, int r) {
	if (r - l > n / k) return; // n/k는 k명이 정렬 진행할 때 각 사람이 맡는 치킨집 개수. 합병이 진행될 수록 각 사람이 맡는 치킨집 개수는 커짐. (2->4->8)
	// 합병이 진행되다가 어느순간 각 사람이 맡는 치킨집 개수가, 문제에서 제시한 조건의 각 사람이 맡는 치킨집 개수보다 커지면 정렬 그만함.

	int a, b, c; //v의 왼쪽, v의 중간, tmp의 왼쪽
	
	a = c = l; // a: 첫 번째 배열의 왼쪽 , c:tmp 배열의 왼쪽
	b = m; // b: 두 번째 배열의 왼쪽

	while (a < m && b < r) { // 두 배열 모두 배열 범위 밖이 아니라면
		if (v[a] < v[b]) tmp[c++] = v[a++]; // 첫 번째 배열의 왼쪽이 더 작다면, tmp에 첫 번째 배열 왼쪽 값을 넣고, tmp와 첫번째 배열의 왼쪽을 한칸씩 옮겨줌
		else tmp[c++] = v[b++]; // 두 번째 배열의 왼쪽이 더 작거나 같다면, tmp에 두 번째 배열 왼쪽 값을 넣고, tmp와 두 번째 배열의 왼쪽을 한칸씩 옮겨줌
	}

	// 배열 중 하나가 배열 범위 밖이라 while문이 종료된 상태
	while (a < m) tmp[c++] = v[a++]; // 첫 번째 배열이 범위 밖이 아니라면, tmp에 첫 번째 배열의 남은 값들을 모두 넣어줌
	while (b < r) tmp[c++] = v[b++]; // 두 번째 배열이 범위 밖이 아니라면, tmp에 두 번째 배열의 남은 값들을 모두 넣어줌

	for (int i = l; i < r; i++) v[i] = tmp[i]; // v를 모두 정렬한 결과를 가진 tmp값을 v에 넣어줌
}

// 배열을 절반으로 나눠줌
void mergeSort(int v[], int l, int r) {
	if (l == r - 1) return;
	int m = (l + r) / 2; // 1~8(4) >> 1~4(2) >> 2~4(3)
	mergeSort(v, l, m); // 1~4(re) >> 1~2(re) / 2~3(re) / 4~6 >> 4~5
	mergeSort(v, m, r); // 4~8 / 2~4(rem) / 3~4(rem) / 6~8 / 5~6
	merge(v, l, m, r); // 2, 3, 4 >> 1, 2, 4 
}

int main()
{
	int v[1048576];

	cin >> n;

	for (int i = 0; i < n; i++) {
		cin >> v[i];
	}

	cin >> k;

	mergeSort(v, 0, n);

	for (int i = 0; i < n; i++) {
		cout << v[i] << " ";
	}

	return 0;
}
